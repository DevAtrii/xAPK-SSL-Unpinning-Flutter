#! /Library/Frameworks/Python.framework/Versions/3.12/bin/python3
import os
import zipfile
import shutil
import subprocess
import json
import sys

# Load or create config.json
def load_config():
    config_file = '/Users/athargul/Coding_2024/App/Tools/xAPK-SSL-Unpinning-Flutter/config.json'
    if os.path.exists(config_file):
        with open(config_file, 'r') as f:
            return json.load(f)
    else:
        return {}

def save_config(config):
    config_file = '/Users/athargul/Coding_2024/App/Tools/xAPK-SSL-Unpinning-Flutter/config.json'
    with open(config_file, 'w') as f:
        json.dump(config, f)

# Function to prompt user for Uber APK Signer path if not present
def get_uber_apk_signer_path():
    config = load_config()
    if 'uber_apk_signer' not in config:
        signer_path = input('Enter the path to Uber APK Signer: ')
        config['uber_apk_signer'] = signer_path.strip()
        save_config(config)
    return config['uber_apk_signer']

# Extract XAPK to temp folder
def extract_xapk(xapk_path, tmp_dir):
    if not os.path.exists(tmp_dir):
        os.makedirs(tmp_dir)
    with zipfile.ZipFile(xapk_path, 'r') as zip_ref:
        zip_ref.extractall(tmp_dir)
    print(f"Extracted {xapk_path} to {tmp_dir}")

# List APK files and let user choose
def choose_apk(tmp_dir):
    apk_files = [f for f in os.listdir(tmp_dir) if f.endswith('.apk')]
    if not apk_files:
        print("No APK files found.")
        exit(1)
    
    print("APK files available:")
    for apk in apk_files:
        print(apk)
    
    chosen_apk = input("Enter the APK file name: ")
    chosen_apk = chosen_apk.strip()
    if chosen_apk not in apk_files:
        print(f"{chosen_apk} not found.")
        exit(1)
    
    return chosen_apk

# Print the IP address
def print_ip_address():
    ip_addr = subprocess.check_output(["ipconfig", "getifaddr", "en0"]).strip().decode()
    print(f"Your IP address is: {ip_addr}")
    return ip_addr

# Run reflutter on the chosen APK
def run_reflutter(chosen_apk, tmp_dir):
    apk_path = os.path.join(tmp_dir, chosen_apk)
    print(f"Running reflutter on {chosen_apk}...")
    subprocess.run(['reflutter', apk_path])
    return apk_path

# Move and cleanup after reflutter
def cleanup_after_reflutter(chosen_apk, original_xapk_name, tmp_dir, unsigned_dir):
    release_apk = 'release.Re.apk'  # The file generated by reflutter
    release_apk_path = os.path.join(os.getcwd(), release_apk)
    chosen_apk_path = os.path.join(tmp_dir, chosen_apk)

    if not os.path.exists(release_apk_path):
        print(f"{release_apk} not found in the root directory.")
        exit(1)

    # Rename release.Re.apk to the chosen APK name
    renamed_release_apk = os.path.join(os.getcwd(), chosen_apk)
    shutil.move(release_apk_path, renamed_release_apk)

    # Create unsigned directory if not exists
    if not os.path.exists(unsigned_dir):
        os.makedirs(unsigned_dir)

    # Move renamed APK (formerly release.Re.apk) to unsigned folder
    shutil.move(renamed_release_apk, os.path.join(unsigned_dir, chosen_apk))
    
    # Move other APK files to unsigned folder
    other_apks = [f for f in os.listdir(tmp_dir) if f.endswith('.apk') and f != chosen_apk]
    for apk in other_apks:
        shutil.move(os.path.join(tmp_dir, apk), unsigned_dir)

# Remove META-INF folder from APK files
def remove_meta_inf(apk_file):
    temp_folder = os.path.splitext(apk_file)[0]
    with zipfile.ZipFile(apk_file, 'r') as zip_ref:
        zip_ref.extractall(temp_folder)

    meta_inf_path = os.path.join(temp_folder, 'META-INF')
    if os.path.exists(meta_inf_path):
        shutil.rmtree(meta_inf_path)

    with zipfile.ZipFile(apk_file, 'w', compression=zipfile.ZIP_STORED) as zip_ref:
        for root, dirs, files in os.walk(temp_folder):
            for file in files:
                file_path = os.path.join(root, file)
                zip_ref.write(file_path, os.path.relpath(file_path, temp_folder))
    
    shutil.rmtree(temp_folder)

# Sign APK files using Uber APK Signer
def sign_apk_files(unsigned_dir):
    uber_apk_signer = get_uber_apk_signer_path()
    apk_files = [f for f in os.listdir(unsigned_dir) if f.endswith('.apk')]

    for apk_file in apk_files:
        apk_path = os.path.join(unsigned_dir, apk_file)
        remove_meta_inf(apk_path)
        subprocess.run(['java', '-jar', uber_apk_signer, '-a', apk_path, '--overwrite'])

# Move signed APKs to tmp/apk and create xapk archive without compression
def move_apks(original_xapk_name, unsigned_dir, apk_dir, tmp_dir):
    if not os.path.exists(apk_dir):
        os.makedirs(apk_dir)

    # Move APK files to tmp/apk directory
    apk_files = [f for f in os.listdir(unsigned_dir) if f.endswith('.apk')]
    for apk_file in apk_files:
        shutil.move(os.path.join(unsigned_dir, apk_file), apk_dir)

    # Create the xapk file in the root directory
    output_xapk = f"xflutter_{original_xapk_name}.xapk"

    with zipfile.ZipFile(output_xapk, 'w', compression=zipfile.ZIP_STORED) as xapk_zip:
        # Add APK files from apk_dir
        for root, dirs, files in os.walk(apk_dir):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, apk_dir)
                xapk_zip.write(file_path, arcname)

        # Add all non-APK files from the original extracted XAPK folder (tmp/xapk)
        for root, dirs, files in os.walk(tmp_dir):
            for file in files:
                if not file.endswith('.apk'):  # Exclude APK files
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, tmp_dir)
                    xapk_zip.write(file_path, arcname)

    # Move the generated xapk to the root directory
    shutil.move(output_xapk, os.path.join(os.getcwd(), output_xapk))

# Clean up temporary files
def cleanup(tmp_dir):
    if os.path.exists(tmp_dir):
        shutil.rmtree(tmp_dir)

# Main function
def main(xapk_path):
    xapk_dir = os.path.dirname(xapk_path)
    
    # Define paths relative to where the XAPK file is located
    tmp_dir = os.path.join(xapk_dir, 'tmp_flutter/xapk')
    unsigned_dir = os.path.join(xapk_dir, 'tmp_flutter/unsigned')
    apk_dir = os.path.join(xapk_dir, 'tmp_flutter/apk')

    original_xapk_name = os.path.basename(xapk_path).replace('.xapk', '')
    extract_xapk(xapk_path, tmp_dir)
    chosen_apk = choose_apk(tmp_dir)
    ip_addr = print_ip_address()

    # Run reflutter and provide the IP address when prompted
    run_reflutter(chosen_apk, tmp_dir)
    print("Enter your IP address when prompted by reflutter.")
    
    cleanup_after_reflutter(chosen_apk, original_xapk_name, tmp_dir, unsigned_dir)
    sign_apk_files(unsigned_dir)
    move_apks(original_xapk_name, unsigned_dir, apk_dir, tmp_dir)
    cleanup(tmp_dir)

    print("Process completed successfully.")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: xsigner <path_to_xapk>")
        sys.exit(1)
    
    # Get XAPK path from the first argument
    xapk_path = sys.argv[1].strip()
    
    main(xapk_path)
